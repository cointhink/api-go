// Code generated by protoc-gen-go.
// source: proto/algolog.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Algolog struct {
	AlgorithmId string `protobuf:"bytes,1,opt,name=AlgorithmId" json:"AlgorithmId,omitempty"`
	Level       string `protobuf:"bytes,2,opt,name=Level" json:"Level,omitempty"`
	Message     string `protobuf:"bytes,3,opt,name=Message" json:"Message,omitempty"`
}

func (m *Algolog) Reset()                    { *m = Algolog{} }
func (m *Algolog) String() string            { return proto1.CompactTextString(m) }
func (*Algolog) ProtoMessage()               {}
func (*Algolog) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

func (m *Algolog) GetAlgorithmId() string {
	if m != nil {
		return m.AlgorithmId
	}
	return ""
}

func (m *Algolog) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *Algolog) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto1.RegisterType((*Algolog)(nil), "proto.Algolog")
}

func init() { proto1.RegisterFile("proto/algolog.proto", fileDescriptor10) }

var fileDescriptor10 = []byte{
	// 110 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0xcc, 0x49, 0xcf, 0xcf, 0xc9, 0x4f, 0xd7, 0x03, 0xf3, 0x84, 0x58, 0xc1, 0x94,
	0x52, 0x34, 0x17, 0xbb, 0x23, 0x44, 0x5c, 0x48, 0x81, 0x8b, 0x1b, 0xc4, 0x2c, 0xca, 0x2c, 0xc9,
	0xc8, 0xf5, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x42, 0x16, 0x12, 0x12, 0xe1, 0x62,
	0xf5, 0x49, 0x2d, 0x4b, 0xcd, 0x91, 0x60, 0x02, 0xcb, 0x41, 0x38, 0x42, 0x12, 0x5c, 0xec, 0xbe,
	0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0xa9, 0x12, 0xcc, 0x60, 0x71, 0x18, 0x37, 0x89, 0x0d, 0x6c, 0x87,
	0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x80, 0xec, 0xb8, 0xd8, 0x81, 0x00, 0x00, 0x00,
}
