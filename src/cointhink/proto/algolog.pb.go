// Code generated by protoc-gen-go.
// source: proto/algolog.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Algolog struct {
	Id        string `protobuf:"bytes,1,opt,name=Id" json:"Id,omitempty"`
	AlgorunId string `protobuf:"bytes,2,opt,name=AlgorunId" json:"AlgorunId,omitempty"`
	Event     string `protobuf:"bytes,3,opt,name=Event" json:"Event,omitempty"`
	Level     string `protobuf:"bytes,4,opt,name=Level" json:"Level,omitempty"`
	Message   string `protobuf:"bytes,5,opt,name=Message" json:"Message,omitempty"`
}

func (m *Algolog) Reset()                    { *m = Algolog{} }
func (m *Algolog) String() string            { return proto1.CompactTextString(m) }
func (*Algolog) ProtoMessage()               {}
func (*Algolog) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

func (m *Algolog) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Algolog) GetAlgorunId() string {
	if m != nil {
		return m.AlgorunId
	}
	return ""
}

func (m *Algolog) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *Algolog) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *Algolog) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto1.RegisterType((*Algolog)(nil), "proto.Algolog")
}

func init() { proto1.RegisterFile("proto/algolog.proto", fileDescriptor10) }

var fileDescriptor10 = []byte{
	// 134 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0xcc, 0x49, 0xcf, 0xcf, 0xc9, 0x4f, 0xd7, 0x03, 0xf3, 0x84, 0x58, 0xc1, 0x94,
	0x52, 0x2d, 0x17, 0xbb, 0x23, 0x44, 0x5c, 0x88, 0x8f, 0x8b, 0xc9, 0x33, 0x45, 0x82, 0x51, 0x81,
	0x51, 0x83, 0x33, 0x88, 0xc9, 0x33, 0x45, 0x48, 0x86, 0x8b, 0x13, 0x24, 0x55, 0x54, 0x9a, 0xe7,
	0x99, 0x22, 0xc1, 0x04, 0x16, 0x46, 0x08, 0x08, 0x89, 0x70, 0xb1, 0xba, 0x96, 0xa5, 0xe6, 0x95,
	0x48, 0x30, 0x83, 0x65, 0x20, 0x1c, 0x90, 0xa8, 0x4f, 0x6a, 0x59, 0x6a, 0x8e, 0x04, 0x0b, 0x44,
	0x14, 0xcc, 0x11, 0x92, 0xe0, 0x62, 0xf7, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x95, 0x60, 0x05,
	0x8b, 0xc3, 0xb8, 0x49, 0x6c, 0x60, 0x57, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x8a, 0xe4,
	0xe2, 0x22, 0xa3, 0x00, 0x00, 0x00,
}
