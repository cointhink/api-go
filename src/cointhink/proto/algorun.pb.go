// Code generated by protoc-gen-go.
// source: proto/algorun.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Algorun struct {
	Id          string `protobuf:"bytes,1,opt,name=Id" json:"Id,omitempty"`
	AlgorithmId string `protobuf:"bytes,2,opt,name=AlgorithmId" json:"AlgorithmId,omitempty"`
	AccountId   string `protobuf:"bytes,3,opt,name=AccountId" json:"AccountId,omitempty"`
	ScheduleId  string `protobuf:"bytes,4,opt,name=ScheduleId" json:"ScheduleId,omitempty"`
	Status      string `protobuf:"bytes,5,opt,name=Status" json:"Status,omitempty"`
}

func (m *Algorun) Reset()                    { *m = Algorun{} }
func (m *Algorun) String() string            { return proto1.CompactTextString(m) }
func (*Algorun) ProtoMessage()               {}
func (*Algorun) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *Algorun) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Algorun) GetAlgorithmId() string {
	if m != nil {
		return m.AlgorithmId
	}
	return ""
}

func (m *Algorun) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *Algorun) GetScheduleId() string {
	if m != nil {
		return m.ScheduleId
	}
	return ""
}

func (m *Algorun) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto1.RegisterType((*Algorun)(nil), "proto.Algorun")
}

func init() { proto1.RegisterFile("proto/algorun.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0xcc, 0x49, 0xcf, 0x2f, 0x2a, 0xcd, 0xd3, 0x03, 0xf3, 0x84, 0x58, 0xc1, 0x94,
	0xd2, 0x44, 0x46, 0x2e, 0x76, 0x47, 0x88, 0x84, 0x10, 0x1f, 0x17, 0x93, 0x67, 0x8a, 0x04, 0xa3,
	0x02, 0xa3, 0x06, 0x67, 0x10, 0x93, 0x67, 0x8a, 0x90, 0x02, 0x17, 0x37, 0x58, 0x2a, 0xb3, 0x24,
	0x23, 0xd7, 0x33, 0x45, 0x82, 0x09, 0x2c, 0x81, 0x2c, 0x24, 0x24, 0xc3, 0xc5, 0xe9, 0x98, 0x9c,
	0x9c, 0x5f, 0x9a, 0x57, 0xe2, 0x99, 0x22, 0xc1, 0x0c, 0x96, 0x47, 0x08, 0x08, 0xc9, 0x71, 0x71,
	0x05, 0x27, 0x67, 0xa4, 0xa6, 0x94, 0xe6, 0xa4, 0x7a, 0xa6, 0x48, 0xb0, 0x80, 0xa5, 0x91, 0x44,
	0x84, 0xc4, 0xb8, 0xd8, 0x82, 0x4b, 0x12, 0x4b, 0x4a, 0x8b, 0x25, 0x58, 0xc1, 0x72, 0x50, 0x5e,
	0x12, 0x1b, 0xd8, 0x69, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x7f, 0x64, 0xca, 0xb8,
	0x00, 0x00, 0x00,
}
